name: Rusty Templates Frontend CI

on:
  workflow_dispatch:
  push:
    branches: [ main, dev, temp ]
  pull_request:
    branches: [ main, dev, temp ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: install toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: wasm32-unknown-unknown
        override: true
        profile: minimal
    - name: Install trunk
      uses: jetli/trunk-action@v0.1.0
      with:
        version: 'latest'
    - name: Build
      # run: |
      #   touch .env
      #   echo "GOOGLE_AD_CLIENT=${{ vars.GOOGLE_AD_CLIENT }}" >> .env
      #   echo "ACL_SERVICE_URL=${{ vars.ACL_SERVICE_URL }}" >> .env
      #   echo "SHARED_SERVICE_URL=${{ vars.SHARED_SERVICE_URL }}" >> .env
      #   echo "MAIN_USER_ID=${{ vars.MAIN_USER_ID }}" >> .env
      #   cat .env
      #   export $(cat .env | xargs) && trunk build --release
      run: |
        cargo install tailwind-yew
        ./tailwindcss -i styles/input.css -o styles/output.css --minify
        trunk build --release
    - name: 'Tar files'
      run: tar -cvf dist.tar dist/
    - name: Archive production artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist.tar

  push_docker_image:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Download a single artifact
      uses: actions/download-artifact@v4
      with:
        name: dist
    - name: Unpack the artifact
      run: tar -xvf dist.tar
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
    - name: Build and push
      run: |
        ls
        docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 -t ${{ secrets.DOCKER_USERNAME }}/rt-frontend:latest --push .

  deploy_to_server:
    needs: push_docker_image
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
    
    - name: Deploy to server via SSH
      uses: appleboy/ssh-action@v0.1.4
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USERNAME }}
        # key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}
        password: ${{ secrets.SERVER_PASSWORD }}
        script: |
            echo "${{ secrets.DOCKER_PASSWORD }}" | CI=true docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            CI=true docker compose -f docker-compose.yml up -d --force-recreate

  automerge:
    runs-on: ubuntu-latest

    needs: [build, push_docker_image, deploy_to_server]
    if: |
      always() &&
      (needs.build.result == 'success' && needs.push_docker_image.result == 'success' && needs.deploy_to_server.result == 'success')

    steps:
      - id: automerge
        name: automerge
        uses: 'pascalgn/automerge-action@v0.15.5'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          MERGE_LABELS: ''
            